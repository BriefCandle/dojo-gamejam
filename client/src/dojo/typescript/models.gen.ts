// Generated by dojo-bindgen on Thu, 22 Aug 2024 20:04:33 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript`
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<
  ReturnType<typeof defineContractComponents>
>;

// Type definition for `dojo_starter::models::Direction` enum
export type Direction =
  | { type: "None" }
  | { type: "Left" }
  | { type: "Right" }
  | { type: "Up" }
  | { type: "Down" };

export const DirectionDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `dojo::model::layout::Layout` enum
export type Layout =
  | { type: "Fixed"; value: RecsType.NumberArray }
  | { type: "Struct"; value: RecsType.StringArray }
  | { type: "Tuple"; value: RecsType.StringArray }
  | { type: "Array"; value: RecsType.StringArray }
  | { type: "ByteArray" }
  | { type: "Enum"; value: RecsType.StringArray };

export const LayoutDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
  data: String[];
  pending_word: BigInt;
  pending_word_len: Number;
}
export const ByteArrayDefinition = {
  data: RecsType.StringArray,
  pending_word: RecsType.BigInt,
  pending_word_len: RecsType.Number,
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
  selector: BigInt;
  layout: Layout;
}
export const FieldLayoutDefinition = {
  selector: RecsType.BigInt,
  layout: LayoutDefinition,
};

// Type definition for `dojo_starter::models::Moves` struct
export interface Moves {
  player: BigInt;
  remaining: Number;
  last_direction: Direction;
  can_move: Boolean;
}
export const MovesDefinition = {
  player: RecsType.BigInt,
  remaining: RecsType.Number,
  last_direction: DirectionDefinition,
  can_move: RecsType.Boolean,
};

// Type definition for `dojo_starter::models::DirectionsAvailable` struct
export interface DirectionsAvailable {
  player: BigInt;
  directions: String[];
}
export const DirectionsAvailableDefinition = {
  player: RecsType.BigInt,
  directions: RecsType.StringArray,
};

// Type definition for `dojo_starter::systems::actions::actions::Moved` struct
export interface Moved {
  player: BigInt;
  direction: Direction;
}
export const MovedDefinition = {
  player: RecsType.BigInt,
  direction: DirectionDefinition,
};

// Type definition for `dojo_starter::models::Vec2` struct
export interface Vec2 {
  x: Number;
  y: Number;
}
export const Vec2Definition = {
  x: RecsType.Number,
  y: RecsType.Number,
};

// Type definition for `dojo_starter::models::Position` struct
export interface Position {
  player: BigInt;
  vec: Vec2;
}
export const PositionDefinition = {
  player: RecsType.BigInt,
  vec: Vec2Definition,
};

export interface EntityType {
  entityId: bigint;
  entityType: bigint;
  count: bigint;
}

export interface Counter {
  entityType: bigint;
  count: bigint;
}

export interface Hero {
  heroId: bigint;
  commander: bigint;
  exp: number;
  battleId: bigint;
  currRound: number;
  health: number;
  mana: number;
}

export interface HeroCovered {
  heroId: bigint;
  isCovered: boolean;
}

export interface HeroSpecs {
  heroType: bigint;
  attack: number;
  defense: number;
  maxHealth: number;
  maxMana: number;
  critChance: number;
  // skillTypes: bigint[];
}

export function defineContractComponents(world: World) {
  return {
    HeroSpecs: (() => {
      return defineComponent(
        world,
        {
          heroType: RecsType.Entity,
          attack: RecsType.Number,
          defense: RecsType.Number,
          maxHealth: RecsType.Number,
          maxMana: RecsType.Number,
          critChance: RecsType.Number,
          // skillTypes: RecsType.BigIntArray,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "HeroSpecs",
            types: ["felt252", "u32", "u32", "u32", "u32", "u32"],
          },
        }
      );
    })(),
    HeroCovered: (() => {
      return defineComponent(
        world,
        {
          heroId: RecsType.BigInt,
          isCovered: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "HeroCovered",
            types: ["felt252", "bool"],
          },
        }
      );
    })(),

    Hero: (() => {
      return defineComponent(
        world,
        {
          heroId: RecsType.BigInt,
          commander: RecsType.BigInt,
          exp: RecsType.Number,
          battleId: RecsType.BigInt,
          currRound: RecsType.Number,
          health: RecsType.Number,
          mana: RecsType.Number,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "Hero",
            types: [
              "felt252",
              "felt252",
              "u32",
              "felt252",
              "u32",
              "u32",
              "u32",
            ],
          },
        }
      );
    })(),
    // Model definition for `dojo_starter::models::Entity` model
    EntityType: (() => {
      return defineComponent(
        world,
        {
          entityId: RecsType.BigInt,
          entityType: RecsType.BigInt,
          count: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "EntityType",
            types: ["felt252", "felt252", "u128"],
          },
        }
      );
    })(),

    // Model definition for `dojo_starter::models::Moves` model
    Moves: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          remaining: RecsType.Number,
          last_direction: RecsType.String,
          can_move: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "Moves",
            types: ["ContractAddress", "u8", "Direction", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `dojo_starter::models::DirectionsAvailable` model
    DirectionsAvailable: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          directions: RecsType.StringArray,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "DirectionsAvailable",
            types: ["ContractAddress", "array"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `dojo_starter::systems::actions::actions::Moved` model
    Moved: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          direction: RecsType.String,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "Moved",
            types: ["ContractAddress", "Direction"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `dojo_starter::models::Position` model
    Position: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          vec: Vec2Definition,
        },
        {
          metadata: {
            namespace: "dojo_starter",
            name: "Position",
            types: ["ContractAddress"],
            customTypes: ["Vec2"],
          },
        }
      );
    })(),
  };
}
